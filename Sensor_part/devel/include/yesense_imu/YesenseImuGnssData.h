// Generated by gencpp from file yesense_imu/YesenseImuGnssData.msg
// DO NOT EDIT!


#ifndef YESENSE_IMU_MESSAGE_YESENSEIMUGNSSDATA_H
#define YESENSE_IMU_MESSAGE_YESENSEIMUGNSSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <yesense_imu/YesenseImuMasterGnssData.h>
#include <yesense_imu/YesenseImuSlaveGnssData.h>

namespace yesense_imu
{
template <class ContainerAllocator>
struct YesenseImuGnssData_
{
  typedef YesenseImuGnssData_<ContainerAllocator> Type;

  YesenseImuGnssData_()
    : master()
    , slave()  {
    }
  YesenseImuGnssData_(const ContainerAllocator& _alloc)
    : master(_alloc)
    , slave(_alloc)  {
  (void)_alloc;
    }



   typedef  ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator>  _master_type;
  _master_type master;

   typedef  ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator>  _slave_type;
  _slave_type slave;





  typedef boost::shared_ptr< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> const> ConstPtr;

}; // struct YesenseImuGnssData_

typedef ::yesense_imu::YesenseImuGnssData_<std::allocator<void> > YesenseImuGnssData;

typedef boost::shared_ptr< ::yesense_imu::YesenseImuGnssData > YesenseImuGnssDataPtr;
typedef boost::shared_ptr< ::yesense_imu::YesenseImuGnssData const> YesenseImuGnssDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yesense_imu::YesenseImuGnssData_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuGnssData_<ContainerAllocator2> & rhs)
{
  return lhs.master == rhs.master &&
    lhs.slave == rhs.slave;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yesense_imu::YesenseImuGnssData_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuGnssData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yesense_imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af4901e8965d58039a1c91b44d48619c";
  }

  static const char* value(const ::yesense_imu::YesenseImuGnssData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf4901e8965d5803ULL;
  static const uint64_t static_value2 = 0x9a1c91b44d48619cULL;
};

template<class ContainerAllocator>
struct DataType< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yesense_imu/YesenseImuGnssData";
  }

  static const char* value(const ::yesense_imu::YesenseImuGnssData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yesense_imu/YesenseImuMasterGnssData master\n"
"yesense_imu/YesenseImuSlaveGnssData slave\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuMasterGnssData\n"
"yesense_imu/YesenseImuUtcTime   utc_time\n"
"yesense_imu/YesenseImuLocation  location\n"
"yesense_imu/YesenseImuLocation  location_error\n"
"yesense_imu/YesenseImuVelocity  vel\n"
"float32 speed\n"
"float32 yaw\n"
"uint8 status\n"
"uint8 star_cnt\n"
"float32 p_dop\n"
"uint8 site_id\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuUtcTime\n"
"uint16 year\n"
"uint8 month\n"
"uint8 date\n"
"uint8 hour\n"
"uint8 min\n"
"uint8 sec\n"
"uint32 ms\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuLocation\n"
"float64 longtidue\n"
"float64 latitude\n"
"float32 altidue\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuVelocity\n"
"float32 v_e\n"
"float32 v_n\n"
"float32 v_u\n"
"\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuSlaveGnssData\n"
"float32 dual_ant_yaw\n"
"float32 dual_ant_yaw_error\n"
"float32 dual_ant_baseline_len\n"
;
  }

  static const char* value(const ::yesense_imu::YesenseImuGnssData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.master);
      stream.next(m.slave);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YesenseImuGnssData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yesense_imu::YesenseImuGnssData_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "master: ";
    Printer< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> >::stream(s, indent + "  ", v.master);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "slave: ";
    Printer< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> >::stream(s, indent + "  ", v.slave);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YESENSE_IMU_MESSAGE_YESENSEIMUGNSSDATA_H
