// Generated by gencpp from file yesense_imu/YesenseImuUtcTime.msg
// DO NOT EDIT!


#ifndef YESENSE_IMU_MESSAGE_YESENSEIMUUTCTIME_H
#define YESENSE_IMU_MESSAGE_YESENSEIMUUTCTIME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yesense_imu
{
template <class ContainerAllocator>
struct YesenseImuUtcTime_
{
  typedef YesenseImuUtcTime_<ContainerAllocator> Type;

  YesenseImuUtcTime_()
    : year(0)
    , month(0)
    , date(0)
    , hour(0)
    , min(0)
    , sec(0)
    , ms(0)  {
    }
  YesenseImuUtcTime_(const ContainerAllocator& _alloc)
    : year(0)
    , month(0)
    , date(0)
    , hour(0)
    , min(0)
    , sec(0)
    , ms(0)  {
  (void)_alloc;
    }



   typedef uint16_t _year_type;
  _year_type year;

   typedef uint8_t _month_type;
  _month_type month;

   typedef uint8_t _date_type;
  _date_type date;

   typedef uint8_t _hour_type;
  _hour_type hour;

   typedef uint8_t _min_type;
  _min_type min;

   typedef uint8_t _sec_type;
  _sec_type sec;

   typedef uint32_t _ms_type;
  _ms_type ms;





  typedef boost::shared_ptr< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> const> ConstPtr;

}; // struct YesenseImuUtcTime_

typedef ::yesense_imu::YesenseImuUtcTime_<std::allocator<void> > YesenseImuUtcTime;

typedef boost::shared_ptr< ::yesense_imu::YesenseImuUtcTime > YesenseImuUtcTimePtr;
typedef boost::shared_ptr< ::yesense_imu::YesenseImuUtcTime const> YesenseImuUtcTimeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator2> & rhs)
{
  return lhs.year == rhs.year &&
    lhs.month == rhs.month &&
    lhs.date == rhs.date &&
    lhs.hour == rhs.hour &&
    lhs.min == rhs.min &&
    lhs.sec == rhs.sec &&
    lhs.ms == rhs.ms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yesense_imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06b86ceee77b65301511398c89917b0e";
  }

  static const char* value(const ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06b86ceee77b6530ULL;
  static const uint64_t static_value2 = 0x1511398c89917b0eULL;
};

template<class ContainerAllocator>
struct DataType< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yesense_imu/YesenseImuUtcTime";
  }

  static const char* value(const ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 year\n"
"uint8 month\n"
"uint8 date\n"
"uint8 hour\n"
"uint8 min\n"
"uint8 sec\n"
"uint32 ms\n"
;
  }

  static const char* value(const ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.year);
      stream.next(m.month);
      stream.next(m.date);
      stream.next(m.hour);
      stream.next(m.min);
      stream.next(m.sec);
      stream.next(m.ms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YesenseImuUtcTime_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "year: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.year);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "month: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.month);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "date: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.date);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "hour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hour);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.min);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "sec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sec);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YESENSE_IMU_MESSAGE_YESENSEIMUUTCTIME_H
