// Generated by gencpp from file yesense_imu/YesenseImuCmdResp.msg
// DO NOT EDIT!


#ifndef YESENSE_IMU_MESSAGE_YESENSEIMUCMDRESP_H
#define YESENSE_IMU_MESSAGE_YESENSEIMUCMDRESP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yesense_imu
{
template <class ContainerAllocator>
struct YesenseImuCmdResp_
{
  typedef YesenseImuCmdResp_<ContainerAllocator> Type;

  YesenseImuCmdResp_()
    : id()
    , cmd()
    , success(false)
    , msg()
    , data()  {
    }
  YesenseImuCmdResp_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , cmd(_alloc)
    , success(false)
    , msg(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cmd_type;
  _cmd_type cmd;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msg_type;
  _msg_type msg;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> const> ConstPtr;

}; // struct YesenseImuCmdResp_

typedef ::yesense_imu::YesenseImuCmdResp_<std::allocator<void> > YesenseImuCmdResp;

typedef boost::shared_ptr< ::yesense_imu::YesenseImuCmdResp > YesenseImuCmdRespPtr;
typedef boost::shared_ptr< ::yesense_imu::YesenseImuCmdResp const> YesenseImuCmdRespConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.cmd == rhs.cmd &&
    lhs.success == rhs.success &&
    lhs.msg == rhs.msg &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yesense_imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "340d2819898517e7a076960b9322a4b4";
  }

  static const char* value(const ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x340d2819898517e7ULL;
  static const uint64_t static_value2 = 0xa076960b9322a4b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yesense_imu/YesenseImuCmdResp";
  }

  static const char* value(const ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"string cmd\n"
"bool success\n"
"string msg\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.cmd);
      stream.next(m.success);
      stream.next(m.msg);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YesenseImuCmdResp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yesense_imu::YesenseImuCmdResp_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cmd);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msg);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "data: ";
    if (v.data.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.data[i]);
    }
    if (v.data.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // YESENSE_IMU_MESSAGE_YESENSEIMUCMDRESP_H
