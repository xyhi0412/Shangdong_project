// Generated by gencpp from file yesense_imu/YesenseImuAllData.msg
// DO NOT EDIT!


#ifndef YESENSE_IMU_MESSAGE_YESENSEIMUALLDATA_H
#define YESENSE_IMU_MESSAGE_YESENSEIMUALLDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Accel.h>
#include <yesense_imu/YesenseImuQuaternion.h>
#include <yesense_imu/YesenseImuEulerAngle.h>
#include <yesense_imu/YesenseImuLocation.h>
#include <yesense_imu/YesenseImuStatus.h>
#include <yesense_imu/YesenseImuGnssData.h>
#include <yesense_imu/YesenseImuGpsData.h>

namespace yesense_imu
{
template <class ContainerAllocator>
struct YesenseImuAllData_
{
  typedef YesenseImuAllData_<ContainerAllocator> Type;

  YesenseImuAllData_()
    : temperature(0.0)
    , sample_timestamp(0)
    , sync_timestamp(0)
    , accel()
    , quaternion()
    , eulerAngle()
    , location()
    , status()
    , gnss()
    , gps()  {
    }
  YesenseImuAllData_(const ContainerAllocator& _alloc)
    : temperature(0.0)
    , sample_timestamp(0)
    , sync_timestamp(0)
    , accel(_alloc)
    , quaternion(_alloc)
    , eulerAngle(_alloc)
    , location(_alloc)
    , status(_alloc)
    , gnss(_alloc)
    , gps(_alloc)  {
  (void)_alloc;
    }



   typedef float _temperature_type;
  _temperature_type temperature;

   typedef uint32_t _sample_timestamp_type;
  _sample_timestamp_type sample_timestamp;

   typedef uint32_t _sync_timestamp_type;
  _sync_timestamp_type sync_timestamp;

   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef  ::yesense_imu::YesenseImuQuaternion_<ContainerAllocator>  _quaternion_type;
  _quaternion_type quaternion;

   typedef  ::yesense_imu::YesenseImuEulerAngle_<ContainerAllocator>  _eulerAngle_type;
  _eulerAngle_type eulerAngle;

   typedef  ::yesense_imu::YesenseImuLocation_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef  ::yesense_imu::YesenseImuStatus_<ContainerAllocator>  _status_type;
  _status_type status;

   typedef  ::yesense_imu::YesenseImuGnssData_<ContainerAllocator>  _gnss_type;
  _gnss_type gnss;

   typedef  ::yesense_imu::YesenseImuGpsData_<ContainerAllocator>  _gps_type;
  _gps_type gps;





  typedef boost::shared_ptr< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> const> ConstPtr;

}; // struct YesenseImuAllData_

typedef ::yesense_imu::YesenseImuAllData_<std::allocator<void> > YesenseImuAllData;

typedef boost::shared_ptr< ::yesense_imu::YesenseImuAllData > YesenseImuAllDataPtr;
typedef boost::shared_ptr< ::yesense_imu::YesenseImuAllData const> YesenseImuAllDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yesense_imu::YesenseImuAllData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yesense_imu::YesenseImuAllData_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuAllData_<ContainerAllocator2> & rhs)
{
  return lhs.temperature == rhs.temperature &&
    lhs.sample_timestamp == rhs.sample_timestamp &&
    lhs.sync_timestamp == rhs.sync_timestamp &&
    lhs.accel == rhs.accel &&
    lhs.quaternion == rhs.quaternion &&
    lhs.eulerAngle == rhs.eulerAngle &&
    lhs.location == rhs.location &&
    lhs.status == rhs.status &&
    lhs.gnss == rhs.gnss &&
    lhs.gps == rhs.gps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yesense_imu::YesenseImuAllData_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuAllData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yesense_imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a98a15a0efa506bbb05ebd139664a484";
  }

  static const char* value(const ::yesense_imu::YesenseImuAllData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa98a15a0efa506bbULL;
  static const uint64_t static_value2 = 0xb05ebd139664a484ULL;
};

template<class ContainerAllocator>
struct DataType< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yesense_imu/YesenseImuAllData";
  }

  static const char* value(const ::yesense_imu::YesenseImuAllData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 temperature\n"
"uint32 sample_timestamp\n"
"uint32 sync_timestamp\n"
"geometry_msgs/Accel accel\n"
"yesense_imu/YesenseImuQuaternion quaternion\n"
"yesense_imu/YesenseImuEulerAngle eulerAngle\n"
"yesense_imu/YesenseImuLocation location\n"
"yesense_imu/YesenseImuStatus status\n"
"yesense_imu/YesenseImuGnssData gnss\n"
"yesense_imu/YesenseImuGpsData gps\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuQuaternion\n"
"float32 q0\n"
"float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuEulerAngle\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuLocation\n"
"float64 longtidue\n"
"float64 latitude\n"
"float32 altidue\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuStatus\n"
"uint8 fusion_status\n"
"uint8 gnss_status\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuGnssData\n"
"yesense_imu/YesenseImuMasterGnssData master\n"
"yesense_imu/YesenseImuSlaveGnssData slave\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuMasterGnssData\n"
"yesense_imu/YesenseImuUtcTime   utc_time\n"
"yesense_imu/YesenseImuLocation  location\n"
"yesense_imu/YesenseImuLocation  location_error\n"
"yesense_imu/YesenseImuVelocity  vel\n"
"float32 speed\n"
"float32 yaw\n"
"uint8 status\n"
"uint8 star_cnt\n"
"float32 p_dop\n"
"uint8 site_id\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuUtcTime\n"
"uint16 year\n"
"uint8 month\n"
"uint8 date\n"
"uint8 hour\n"
"uint8 min\n"
"uint8 sec\n"
"uint32 ms\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuVelocity\n"
"float32 v_e\n"
"float32 v_n\n"
"float32 v_u\n"
"\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuSlaveGnssData\n"
"float32 dual_ant_yaw\n"
"float32 dual_ant_yaw_error\n"
"float32 dual_ant_baseline_len\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuGpsData\n"
"string[] raw_data\n"
;
  }

  static const char* value(const ::yesense_imu::YesenseImuAllData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temperature);
      stream.next(m.sample_timestamp);
      stream.next(m.sync_timestamp);
      stream.next(m.accel);
      stream.next(m.quaternion);
      stream.next(m.eulerAngle);
      stream.next(m.location);
      stream.next(m.status);
      stream.next(m.gnss);
      stream.next(m.gps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YesenseImuAllData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yesense_imu::YesenseImuAllData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yesense_imu::YesenseImuAllData_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "sample_timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sample_timestamp);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "sync_timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sync_timestamp);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "accel: ";
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "quaternion: ";
    Printer< ::yesense_imu::YesenseImuQuaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quaternion);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "eulerAngle: ";
    Printer< ::yesense_imu::YesenseImuEulerAngle_<ContainerAllocator> >::stream(s, indent + "  ", v.eulerAngle);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "location: ";
    Printer< ::yesense_imu::YesenseImuLocation_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "status: ";
    Printer< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gnss: ";
    Printer< ::yesense_imu::YesenseImuGnssData_<ContainerAllocator> >::stream(s, indent + "  ", v.gnss);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gps: ";
    Printer< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> >::stream(s, indent + "  ", v.gps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YESENSE_IMU_MESSAGE_YESENSEIMUALLDATA_H
