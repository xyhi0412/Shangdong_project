// Generated by gencpp from file yesense_imu/YesenseImuStatus.msg
// DO NOT EDIT!


#ifndef YESENSE_IMU_MESSAGE_YESENSEIMUSTATUS_H
#define YESENSE_IMU_MESSAGE_YESENSEIMUSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yesense_imu
{
template <class ContainerAllocator>
struct YesenseImuStatus_
{
  typedef YesenseImuStatus_<ContainerAllocator> Type;

  YesenseImuStatus_()
    : fusion_status(0)
    , gnss_status(0)  {
    }
  YesenseImuStatus_(const ContainerAllocator& _alloc)
    : fusion_status(0)
    , gnss_status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _fusion_status_type;
  _fusion_status_type fusion_status;

   typedef uint8_t _gnss_status_type;
  _gnss_status_type gnss_status;





  typedef boost::shared_ptr< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> const> ConstPtr;

}; // struct YesenseImuStatus_

typedef ::yesense_imu::YesenseImuStatus_<std::allocator<void> > YesenseImuStatus;

typedef boost::shared_ptr< ::yesense_imu::YesenseImuStatus > YesenseImuStatusPtr;
typedef boost::shared_ptr< ::yesense_imu::YesenseImuStatus const> YesenseImuStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yesense_imu::YesenseImuStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yesense_imu::YesenseImuStatus_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuStatus_<ContainerAllocator2> & rhs)
{
  return lhs.fusion_status == rhs.fusion_status &&
    lhs.gnss_status == rhs.gnss_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yesense_imu::YesenseImuStatus_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yesense_imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce0abe5eeaff955681f09594f0484f51";
  }

  static const char* value(const ::yesense_imu::YesenseImuStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce0abe5eeaff9556ULL;
  static const uint64_t static_value2 = 0x81f09594f0484f51ULL;
};

template<class ContainerAllocator>
struct DataType< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yesense_imu/YesenseImuStatus";
  }

  static const char* value(const ::yesense_imu::YesenseImuStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 fusion_status\n"
"uint8 gnss_status\n"
;
  }

  static const char* value(const ::yesense_imu::YesenseImuStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fusion_status);
      stream.next(m.gnss_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YesenseImuStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yesense_imu::YesenseImuStatus_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "fusion_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fusion_status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gnss_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gnss_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YESENSE_IMU_MESSAGE_YESENSEIMUSTATUS_H
