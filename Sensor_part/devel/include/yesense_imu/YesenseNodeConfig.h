//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the yesense_imu package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __yesense_imu__YESENSENODECONFIG_H__
#define __yesense_imu__YESENSENODECONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace yesense_imu
{
  class YesenseNodeConfigStatics;

  class YesenseNodeConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(YesenseNodeConfig &config, const YesenseNodeConfig &max, const YesenseNodeConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const YesenseNodeConfig &config1, const YesenseNodeConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, YesenseNodeConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const YesenseNodeConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, YesenseNodeConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const YesenseNodeConfig &config) const = 0;
      virtual void getValue(const YesenseNodeConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T YesenseNodeConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T YesenseNodeConfig::* field;

      virtual void clamp(YesenseNodeConfig &config, const YesenseNodeConfig &max, const YesenseNodeConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const YesenseNodeConfig &config1, const YesenseNodeConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, YesenseNodeConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const YesenseNodeConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, YesenseNodeConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const YesenseNodeConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const YesenseNodeConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, YesenseNodeConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, YesenseNodeConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<YesenseNodeConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(YesenseNodeConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("id"==(*_i)->name){id = boost::any_cast<int>(val);}
        if("param_setting"==(*_i)->name){param_setting = boost::any_cast<bool>(val);}
        if("baudrate"==(*_i)->name){baudrate = boost::any_cast<int>(val);}
        if("freequency"==(*_i)->name){freequency = boost::any_cast<int>(val);}
        if("speed_output_switch"==(*_i)->name){speed_output_switch = boost::any_cast<bool>(val);}
        if("location_output_switch"==(*_i)->name){location_output_switch = boost::any_cast<bool>(val);}
        if("UTC_output_switch"==(*_i)->name){UTC_output_switch = boost::any_cast<bool>(val);}
        if("quaternion_output_switch"==(*_i)->name){quaternion_output_switch = boost::any_cast<bool>(val);}
        if("euler_output_switch"==(*_i)->name){euler_output_switch = boost::any_cast<bool>(val);}
        if("magnetic_output_switch"==(*_i)->name){magnetic_output_switch = boost::any_cast<bool>(val);}
        if("angular_velicity_output_switch"==(*_i)->name){angular_velicity_output_switch = boost::any_cast<bool>(val);}
        if("acceleration_increament_output_switch"==(*_i)->name){acceleration_increament_output_switch = boost::any_cast<bool>(val);}
        if("velicity_increament_output_switch"==(*_i)->name){velicity_increament_output_switch = boost::any_cast<bool>(val);}
        if("quaternion_increament_output_switch"==(*_i)->name){quaternion_increament_output_switch = boost::any_cast<bool>(val);}
        if("imu_temp_output_switch"==(*_i)->name){imu_temp_output_switch = boost::any_cast<bool>(val);}
        if("second_imu_angle_output_switch"==(*_i)->name){second_imu_angle_output_switch = boost::any_cast<bool>(val);}
        if("second_imu_accel_output_switch"==(*_i)->name){second_imu_accel_output_switch = boost::any_cast<bool>(val);}
        if("second_imu_temp_output_switch"==(*_i)->name){second_imu_temp_output_switch = boost::any_cast<bool>(val);}
        if("free_accel_output_switch"==(*_i)->name){free_accel_output_switch = boost::any_cast<bool>(val);}
        if("timestamp_output_switch"==(*_i)->name){timestamp_output_switch = boost::any_cast<bool>(val);}
        if("reset_param"==(*_i)->name){reset_param = boost::any_cast<int>(val);}
        if("mode_setting"==(*_i)->name){mode_setting = boost::any_cast<int>(val);}
        if("GPHPR_output_switch"==(*_i)->name){GPHPR_output_switch = boost::any_cast<bool>(val);}
        if("GPVTG_output_switch"==(*_i)->name){GPVTG_output_switch = boost::any_cast<bool>(val);}
        if("GPRMC_output_switch"==(*_i)->name){GPRMC_output_switch = boost::any_cast<bool>(val);}
        if("GPGSV_output_switch"==(*_i)->name){GPGSV_output_switch = boost::any_cast<bool>(val);}
        if("GPGSA_output_switch"==(*_i)->name){GPGSA_output_switch = boost::any_cast<bool>(val);}
        if("GPGGA_output_switch"==(*_i)->name){GPGGA_output_switch = boost::any_cast<bool>(val);}
      }
    }

    int id;
bool param_setting;
int baudrate;
int freequency;
bool speed_output_switch;
bool location_output_switch;
bool UTC_output_switch;
bool quaternion_output_switch;
bool euler_output_switch;
bool magnetic_output_switch;
bool angular_velicity_output_switch;
bool acceleration_increament_output_switch;
bool velicity_increament_output_switch;
bool quaternion_increament_output_switch;
bool imu_temp_output_switch;
bool second_imu_angle_output_switch;
bool second_imu_accel_output_switch;
bool second_imu_temp_output_switch;
bool free_accel_output_switch;
bool timestamp_output_switch;
int reset_param;
int mode_setting;
bool GPHPR_output_switch;
bool GPVTG_output_switch;
bool GPRMC_output_switch;
bool GPGSV_output_switch;
bool GPGSA_output_switch;
bool GPGGA_output_switch;

    bool state;
    std::string name;

    
}groups;



//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int id;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool param_setting;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int baudrate;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int freequency;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool speed_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool location_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool UTC_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool quaternion_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool euler_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool magnetic_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool angular_velicity_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool acceleration_increament_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool velicity_increament_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool quaternion_increament_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool imu_temp_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool second_imu_angle_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool second_imu_accel_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool second_imu_temp_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool free_accel_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool timestamp_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int reset_param;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int mode_setting;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool GPHPR_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool GPVTG_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool GPRMC_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool GPGSV_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool GPGSA_output_switch;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool GPGGA_output_switch;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("YesenseNodeConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (size_t i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (size_t i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (size_t i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (size_t i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const YesenseNodeConfig &__max__ = __getMax__();
      const YesenseNodeConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const YesenseNodeConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const YesenseNodeConfig &__getDefault__();
    static const YesenseNodeConfig &__getMax__();
    static const YesenseNodeConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const YesenseNodeConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void YesenseNodeConfig::ParamDescription<std::string>::clamp(YesenseNodeConfig &config, const YesenseNodeConfig &max, const YesenseNodeConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class YesenseNodeConfigStatics
  {
    friend class YesenseNodeConfig;

    YesenseNodeConfigStatics()
    {
YesenseNodeConfig::GroupDescription<YesenseNodeConfig::DEFAULT, YesenseNodeConfig> Default("Default", "", 0, 0, true, &YesenseNodeConfig::groups);
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.id = -2147483648;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.id = 2147483647;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.id = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<int>("id", "int", 65280, "A size parameter which is edited via an enum", "{'enum': [{'name': 'ConfigStatusMemery', 'type': 'int', 'value': 1, 'srcline': 29, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'Set Param of the IMU temporary', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'ConfigStatusFlash', 'type': 'int', 'value': 2, 'srcline': 30, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'Set Param of the IMU permanent', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'An enum of ID'}", &YesenseNodeConfig::id)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<int>("id", "int", 65280, "A size parameter which is edited via an enum", "{'enum': [{'name': 'ConfigStatusMemery', 'type': 'int', 'value': 1, 'srcline': 29, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'Set Param of the IMU temporary', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'ConfigStatusFlash', 'type': 'int', 'value': 2, 'srcline': 30, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'Set Param of the IMU permanent', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'An enum of ID'}", &YesenseNodeConfig::id)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.param_setting = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.param_setting = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.param_setting = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("param_setting", "bool", 256, "Reset yaw to zero", "", &YesenseNodeConfig::param_setting)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("param_setting", "bool", 256, "Reset yaw to zero", "", &YesenseNodeConfig::param_setting)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.baudrate = -2147483648;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.baudrate = 2147483647;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.baudrate = 4;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<int>("baudrate", "int", 512, "A size parameter which is edited via an enum", "{'enum': [{'name': '9600_bps', 'type': 'int', 'value': 1, 'srcline': 43, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 9600   bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '38400_bps', 'type': 'int', 'value': 2, 'srcline': 44, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 38400  bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '115200_bps', 'type': 'int', 'value': 3, 'srcline': 45, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 115200 bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '460800_bps', 'type': 'int', 'value': 4, 'srcline': 46, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 460800 bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '921600_bps', 'type': 'int', 'value': 5, 'srcline': 47, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 921600 bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '19200_bps', 'type': 'int', 'value': 6, 'srcline': 48, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 19200  bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '57600_bps', 'type': 'int', 'value': 7, 'srcline': 49, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 57600  bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '76800_bps', 'type': 'int', 'value': 8, 'srcline': 50, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 57600  bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '230400_bps', 'type': 'int', 'value': 9, 'srcline': 51, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 230400 bps', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'An enum to set baudrate'}", &YesenseNodeConfig::baudrate)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<int>("baudrate", "int", 512, "A size parameter which is edited via an enum", "{'enum': [{'name': '9600_bps', 'type': 'int', 'value': 1, 'srcline': 43, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 9600   bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '38400_bps', 'type': 'int', 'value': 2, 'srcline': 44, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 38400  bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '115200_bps', 'type': 'int', 'value': 3, 'srcline': 45, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 115200 bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '460800_bps', 'type': 'int', 'value': 4, 'srcline': 46, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 460800 bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '921600_bps', 'type': 'int', 'value': 5, 'srcline': 47, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 921600 bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '19200_bps', 'type': 'int', 'value': 6, 'srcline': 48, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 19200  bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '57600_bps', 'type': 'int', 'value': 7, 'srcline': 49, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 57600  bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '76800_bps', 'type': 'int', 'value': 8, 'srcline': 50, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 57600  bps', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '230400_bps', 'type': 'int', 'value': 9, 'srcline': 51, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set baudrate as 230400 bps', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'An enum to set baudrate'}", &YesenseNodeConfig::baudrate)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.freequency = -2147483648;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.freequency = 2147483647;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.freequency = 8;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<int>("freequency", "int", 768, "A size parameter which is edited via an enum", "{'enum': [{'name': '1_Hz', 'type': 'int', 'value': 1, 'srcline': 56, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 1    Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '2_Hz', 'type': 'int', 'value': 2, 'srcline': 57, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 2    Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '5_Hz', 'type': 'int', 'value': 3, 'srcline': 58, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 5    Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '10_Hz', 'type': 'int', 'value': 4, 'srcline': 59, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 10   Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '20_Hz', 'type': 'int', 'value': 5, 'srcline': 60, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 20   Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '25_Hz', 'type': 'int', 'value': 6, 'srcline': 61, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 25   Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '50_Hz', 'type': 'int', 'value': 7, 'srcline': 62, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 50   Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '100_Hz', 'type': 'int', 'value': 8, 'srcline': 63, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 100  Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '200_Hz', 'type': 'int', 'value': 9, 'srcline': 64, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 200  Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '250_Hz', 'type': 'int', 'value': 10, 'srcline': 65, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 250  Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '500_Hz', 'type': 'int', 'value': 11, 'srcline': 66, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 500  Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '1000_Hz', 'type': 'int', 'value': 12, 'srcline': 67, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 1000 Hz', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'An enum to set output freequency'}", &YesenseNodeConfig::freequency)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<int>("freequency", "int", 768, "A size parameter which is edited via an enum", "{'enum': [{'name': '1_Hz', 'type': 'int', 'value': 1, 'srcline': 56, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 1    Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '2_Hz', 'type': 'int', 'value': 2, 'srcline': 57, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 2    Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '5_Hz', 'type': 'int', 'value': 3, 'srcline': 58, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 5    Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '10_Hz', 'type': 'int', 'value': 4, 'srcline': 59, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 10   Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '20_Hz', 'type': 'int', 'value': 5, 'srcline': 60, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 20   Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '25_Hz', 'type': 'int', 'value': 6, 'srcline': 61, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 25   Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '50_Hz', 'type': 'int', 'value': 7, 'srcline': 62, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 50   Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '100_Hz', 'type': 'int', 'value': 8, 'srcline': 63, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 100  Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '200_Hz', 'type': 'int', 'value': 9, 'srcline': 64, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 200  Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '250_Hz', 'type': 'int', 'value': 10, 'srcline': 65, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 250  Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '500_Hz', 'type': 'int', 'value': 11, 'srcline': 66, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 500  Hz', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': '1000_Hz', 'type': 'int', 'value': 12, 'srcline': 67, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'set output freequency as 1000 Hz', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'An enum to set output freequency'}", &YesenseNodeConfig::freequency)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.speed_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.speed_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.speed_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("speed_output_switch", "bool", 1024, "Enable imu's speed output", "", &YesenseNodeConfig::speed_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("speed_output_switch", "bool", 1024, "Enable imu's speed output", "", &YesenseNodeConfig::speed_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.location_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.location_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.location_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("location_output_switch", "bool", 1025, "Enable imu's location output", "", &YesenseNodeConfig::location_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("location_output_switch", "bool", 1025, "Enable imu's location output", "", &YesenseNodeConfig::location_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.UTC_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.UTC_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.UTC_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("UTC_output_switch", "bool", 1026, "Enable imu's UTC output", "", &YesenseNodeConfig::UTC_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("UTC_output_switch", "bool", 1026, "Enable imu's UTC output", "", &YesenseNodeConfig::UTC_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.quaternion_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.quaternion_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.quaternion_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("quaternion_output_switch", "bool", 1027, "Enable imu's quaternion output", "", &YesenseNodeConfig::quaternion_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("quaternion_output_switch", "bool", 1027, "Enable imu's quaternion output", "", &YesenseNodeConfig::quaternion_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.euler_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.euler_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.euler_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("euler_output_switch", "bool", 1028, "Enable imu's euler angle output", "", &YesenseNodeConfig::euler_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("euler_output_switch", "bool", 1028, "Enable imu's euler angle output", "", &YesenseNodeConfig::euler_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.magnetic_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.magnetic_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.magnetic_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("magnetic_output_switch", "bool", 1029, "Enable imu's magnetic output", "", &YesenseNodeConfig::magnetic_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("magnetic_output_switch", "bool", 1029, "Enable imu's magnetic output", "", &YesenseNodeConfig::magnetic_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.angular_velicity_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.angular_velicity_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.angular_velicity_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("angular_velicity_output_switch", "bool", 1030, "Enable imu's angular velicity output", "", &YesenseNodeConfig::angular_velicity_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("angular_velicity_output_switch", "bool", 1030, "Enable imu's angular velicity output", "", &YesenseNodeConfig::angular_velicity_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acceleration_increament_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acceleration_increament_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acceleration_increament_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("acceleration_increament_output_switch", "bool", 1031, "Enable imu's acceleration increament output", "", &YesenseNodeConfig::acceleration_increament_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("acceleration_increament_output_switch", "bool", 1031, "Enable imu's acceleration increament output", "", &YesenseNodeConfig::acceleration_increament_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.velicity_increament_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.velicity_increament_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.velicity_increament_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("velicity_increament_output_switch", "bool", 1032, "Enable imu's velicity increament output", "", &YesenseNodeConfig::velicity_increament_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("velicity_increament_output_switch", "bool", 1032, "Enable imu's velicity increament output", "", &YesenseNodeConfig::velicity_increament_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.quaternion_increament_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.quaternion_increament_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.quaternion_increament_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("quaternion_increament_output_switch", "bool", 1033, "Enable imu's quaternion increament output", "", &YesenseNodeConfig::quaternion_increament_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("quaternion_increament_output_switch", "bool", 1033, "Enable imu's quaternion increament output", "", &YesenseNodeConfig::quaternion_increament_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.imu_temp_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.imu_temp_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.imu_temp_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("imu_temp_output_switch", "bool", 1034, "Enable imu's tempature output", "", &YesenseNodeConfig::imu_temp_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("imu_temp_output_switch", "bool", 1034, "Enable imu's tempature output", "", &YesenseNodeConfig::imu_temp_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.second_imu_angle_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.second_imu_angle_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.second_imu_angle_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("second_imu_angle_output_switch", "bool", 1035, "Enable second imu's angle velocity output", "", &YesenseNodeConfig::second_imu_angle_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("second_imu_angle_output_switch", "bool", 1035, "Enable second imu's angle velocity output", "", &YesenseNodeConfig::second_imu_angle_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.second_imu_accel_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.second_imu_accel_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.second_imu_accel_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("second_imu_accel_output_switch", "bool", 1036, "Enable second imu's accel output", "", &YesenseNodeConfig::second_imu_accel_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("second_imu_accel_output_switch", "bool", 1036, "Enable second imu's accel output", "", &YesenseNodeConfig::second_imu_accel_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.second_imu_temp_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.second_imu_temp_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.second_imu_temp_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("second_imu_temp_output_switch", "bool", 1037, "Enable second imu's tempature output", "", &YesenseNodeConfig::second_imu_temp_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("second_imu_temp_output_switch", "bool", 1037, "Enable second imu's tempature output", "", &YesenseNodeConfig::second_imu_temp_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.free_accel_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.free_accel_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.free_accel_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("free_accel_output_switch", "bool", 1038, "Enable free accel output", "", &YesenseNodeConfig::free_accel_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("free_accel_output_switch", "bool", 1038, "Enable free accel output", "", &YesenseNodeConfig::free_accel_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.timestamp_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.timestamp_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.timestamp_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("timestamp_output_switch", "bool", 1039, "Enable timestamp output", "", &YesenseNodeConfig::timestamp_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("timestamp_output_switch", "bool", 1039, "Enable timestamp output", "", &YesenseNodeConfig::timestamp_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.reset_param = -2147483648;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.reset_param = 2147483647;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.reset_param = 17;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<int>("reset_param", "int", 1280, "Reset imu's parameter", "{'enum': [{'name': 'RESET_ROLL_PITCH', 'type': 'int', 'value': 17, 'srcline': 91, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'Reset Roll & Pitch', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'RESET_YAW', 'type': 'int', 'value': 18, 'srcline': 92, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'Reset Yaw', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'An enum to reset param'}", &YesenseNodeConfig::reset_param)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<int>("reset_param", "int", 1280, "Reset imu's parameter", "{'enum': [{'name': 'RESET_ROLL_PITCH', 'type': 'int', 'value': 17, 'srcline': 91, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'Reset Roll & Pitch', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'RESET_YAW', 'type': 'int', 'value': 18, 'srcline': 92, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'Reset Yaw', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'An enum to reset param'}", &YesenseNodeConfig::reset_param)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.mode_setting = -2147483648;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.mode_setting = 2147483647;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.mode_setting = 2;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<int>("mode_setting", "int", 19712, "ARHS or VRU mode", "{'enum': [{'name': 'ARHS_VRU_Handover', 'type': 'int', 'value': 2, 'srcline': 98, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'ARHS or VRU Handover', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'CUSTOMIZE_NEMA0183_Handover', 'type': 'int', 'value': 3, 'srcline': 99, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'CUSTOMIZE or  NEMA0183 protocal Handover', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'HIHG_LOW_frequency_Handover', 'type': 'int', 'value': 4, 'srcline': 100, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'HIGH or LOW output freequency Handover', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'GYRO_BIAS_Initialization', 'type': 'int', 'value': 80, 'srcline': 101, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'GYRO BIAS Initialization', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'An enum of output mode'}", &YesenseNodeConfig::mode_setting)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<int>("mode_setting", "int", 19712, "ARHS or VRU mode", "{'enum': [{'name': 'ARHS_VRU_Handover', 'type': 'int', 'value': 2, 'srcline': 98, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'ARHS or VRU Handover', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'CUSTOMIZE_NEMA0183_Handover', 'type': 'int', 'value': 3, 'srcline': 99, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'CUSTOMIZE or  NEMA0183 protocal Handover', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'HIHG_LOW_frequency_Handover', 'type': 'int', 'value': 4, 'srcline': 100, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'HIGH or LOW output freequency Handover', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'GYRO_BIAS_Initialization', 'type': 'int', 'value': 80, 'srcline': 101, 'srcfile': '/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg', 'description': 'GYRO BIAS Initialization', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'An enum of output mode'}", &YesenseNodeConfig::mode_setting)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.GPHPR_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.GPHPR_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.GPHPR_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("GPHPR_output_switch", "bool", 19968, "GPHPR output switch", "", &YesenseNodeConfig::GPHPR_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("GPHPR_output_switch", "bool", 19968, "GPHPR output switch", "", &YesenseNodeConfig::GPHPR_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.GPVTG_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.GPVTG_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.GPVTG_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("GPVTG_output_switch", "bool", 19969, "GPVTG output switch", "", &YesenseNodeConfig::GPVTG_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("GPVTG_output_switch", "bool", 19969, "GPVTG output switch", "", &YesenseNodeConfig::GPVTG_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.GPRMC_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.GPRMC_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.GPRMC_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("GPRMC_output_switch", "bool", 19970, "GPRMC output switch", "", &YesenseNodeConfig::GPRMC_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("GPRMC_output_switch", "bool", 19970, "GPRMC output switch", "", &YesenseNodeConfig::GPRMC_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.GPGSV_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.GPGSV_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.GPGSV_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("GPGSV_output_switch", "bool", 19971, "GPGSV output switch", "", &YesenseNodeConfig::GPGSV_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("GPGSV_output_switch", "bool", 19971, "GPGSV output switch", "", &YesenseNodeConfig::GPGSV_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.GPGSA_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.GPGSA_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.GPGSA_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("GPGSA_output_switch", "bool", 19972, "GPGSA output switch", "", &YesenseNodeConfig::GPGSA_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("GPGSA_output_switch", "bool", 19972, "GPGSA output switch", "", &YesenseNodeConfig::GPGSA_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.GPGGA_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.GPGGA_output_switch = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.GPGGA_output_switch = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("GPGGA_output_switch", "bool", 19973, "GPGGA output switch", "", &YesenseNodeConfig::GPGGA_output_switch)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(YesenseNodeConfig::AbstractParamDescriptionConstPtr(new YesenseNodeConfig::ParamDescription<bool>("GPGGA_output_switch", "bool", 19973, "GPGGA output switch", "", &YesenseNodeConfig::GPGGA_output_switch)));
//#line 247 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 247 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(YesenseNodeConfig::AbstractGroupDescriptionConstPtr(new YesenseNodeConfig::GroupDescription<YesenseNodeConfig::DEFAULT, YesenseNodeConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<YesenseNodeConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<YesenseNodeConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<YesenseNodeConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    YesenseNodeConfig __max__;
    YesenseNodeConfig __min__;
    YesenseNodeConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const YesenseNodeConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static YesenseNodeConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &YesenseNodeConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const YesenseNodeConfig &YesenseNodeConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const YesenseNodeConfig &YesenseNodeConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const YesenseNodeConfig &YesenseNodeConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<YesenseNodeConfig::AbstractParamDescriptionConstPtr> &YesenseNodeConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<YesenseNodeConfig::AbstractGroupDescriptionConstPtr> &YesenseNodeConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const YesenseNodeConfigStatics *YesenseNodeConfig::__get_statics__()
  {
    const static YesenseNodeConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = YesenseNodeConfigStatics::get_instance();

    return statics;
  }

//#line 29 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_ConfigStatusMemery = 1;
//#line 30 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_ConfigStatusFlash = 2;
//#line 43 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_9600_bps = 1;
//#line 44 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_38400_bps = 2;
//#line 45 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_115200_bps = 3;
//#line 46 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_460800_bps = 4;
//#line 47 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_921600_bps = 5;
//#line 48 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_19200_bps = 6;
//#line 49 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_57600_bps = 7;
//#line 50 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_76800_bps = 8;
//#line 51 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_230400_bps = 9;
//#line 56 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_1_Hz = 1;
//#line 57 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_2_Hz = 2;
//#line 58 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_5_Hz = 3;
//#line 59 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_10_Hz = 4;
//#line 60 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_20_Hz = 5;
//#line 61 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_25_Hz = 6;
//#line 62 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_50_Hz = 7;
//#line 63 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_100_Hz = 8;
//#line 64 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_200_Hz = 9;
//#line 65 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_250_Hz = 10;
//#line 66 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_500_Hz = 11;
//#line 67 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_1000_Hz = 12;
//#line 91 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_RESET_ROLL_PITCH = 17;
//#line 92 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_RESET_YAW = 18;
//#line 98 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_ARHS_VRU_Handover = 2;
//#line 99 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_CUSTOMIZE_NEMA0183_Handover = 3;
//#line 100 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_HIHG_LOW_frequency_Handover = 4;
//#line 101 "/home/xiaomi1/Shandong_project/Sensor_part/src/yesense/cfg/Yesense.cfg"
      const int YesenseNode_GYRO_BIAS_Initialization = 80;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __YESENSENODERECONFIGURATOR_H__
