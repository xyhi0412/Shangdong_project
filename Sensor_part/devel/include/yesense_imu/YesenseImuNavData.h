// Generated by gencpp from file yesense_imu/YesenseImuNavData.msg
// DO NOT EDIT!


#ifndef YESENSE_IMU_MESSAGE_YESENSEIMUNAVDATA_H
#define YESENSE_IMU_MESSAGE_YESENSEIMUNAVDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <yesense_imu/YesenseImuLocation.h>
#include <yesense_imu/YesenseImuUtcTime.h>
#include <yesense_imu/YesenseImuStatus.h>

namespace yesense_imu
{
template <class ContainerAllocator>
struct YesenseImuNavData_
{
  typedef YesenseImuNavData_<ContainerAllocator> Type;

  YesenseImuNavData_()
    : tid(0)
    , location()
    , utc_time()
    , status()  {
    }
  YesenseImuNavData_(const ContainerAllocator& _alloc)
    : tid(0)
    , location(_alloc)
    , utc_time(_alloc)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _tid_type;
  _tid_type tid;

   typedef  ::yesense_imu::YesenseImuLocation_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef  ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator>  _utc_time_type;
  _utc_time_type utc_time;

   typedef  ::yesense_imu::YesenseImuStatus_<ContainerAllocator>  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> const> ConstPtr;

}; // struct YesenseImuNavData_

typedef ::yesense_imu::YesenseImuNavData_<std::allocator<void> > YesenseImuNavData;

typedef boost::shared_ptr< ::yesense_imu::YesenseImuNavData > YesenseImuNavDataPtr;
typedef boost::shared_ptr< ::yesense_imu::YesenseImuNavData const> YesenseImuNavDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yesense_imu::YesenseImuNavData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yesense_imu::YesenseImuNavData_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuNavData_<ContainerAllocator2> & rhs)
{
  return lhs.tid == rhs.tid &&
    lhs.location == rhs.location &&
    lhs.utc_time == rhs.utc_time &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yesense_imu::YesenseImuNavData_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuNavData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yesense_imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4aa52ebf06cd4d0bdd17a2cc70d2b2cf";
  }

  static const char* value(const ::yesense_imu::YesenseImuNavData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4aa52ebf06cd4d0bULL;
  static const uint64_t static_value2 = 0xdd17a2cc70d2b2cfULL;
};

template<class ContainerAllocator>
struct DataType< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yesense_imu/YesenseImuNavData";
  }

  static const char* value(const ::yesense_imu::YesenseImuNavData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16                          tid\n"
"yesense_imu/YesenseImuLocation  location\n"
"yesense_imu/YesenseImuUtcTime   utc_time\n"
"yesense_imu/YesenseImuStatus    status\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuLocation\n"
"float64 longtidue\n"
"float64 latitude\n"
"float32 altidue\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuUtcTime\n"
"uint16 year\n"
"uint8 month\n"
"uint8 date\n"
"uint8 hour\n"
"uint8 min\n"
"uint8 sec\n"
"uint32 ms\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuStatus\n"
"uint8 fusion_status\n"
"uint8 gnss_status\n"
;
  }

  static const char* value(const ::yesense_imu::YesenseImuNavData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tid);
      stream.next(m.location);
      stream.next(m.utc_time);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YesenseImuNavData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yesense_imu::YesenseImuNavData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yesense_imu::YesenseImuNavData_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "tid: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tid);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "location: ";
    Printer< ::yesense_imu::YesenseImuLocation_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "utc_time: ";
    Printer< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> >::stream(s, indent + "  ", v.utc_time);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "status: ";
    Printer< ::yesense_imu::YesenseImuStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YESENSE_IMU_MESSAGE_YESENSEIMUNAVDATA_H
