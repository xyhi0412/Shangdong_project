// Generated by gencpp from file yesense_imu/YesenseImuSlaveGnssData.msg
// DO NOT EDIT!


#ifndef YESENSE_IMU_MESSAGE_YESENSEIMUSLAVEGNSSDATA_H
#define YESENSE_IMU_MESSAGE_YESENSEIMUSLAVEGNSSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yesense_imu
{
template <class ContainerAllocator>
struct YesenseImuSlaveGnssData_
{
  typedef YesenseImuSlaveGnssData_<ContainerAllocator> Type;

  YesenseImuSlaveGnssData_()
    : dual_ant_yaw(0.0)
    , dual_ant_yaw_error(0.0)
    , dual_ant_baseline_len(0.0)  {
    }
  YesenseImuSlaveGnssData_(const ContainerAllocator& _alloc)
    : dual_ant_yaw(0.0)
    , dual_ant_yaw_error(0.0)
    , dual_ant_baseline_len(0.0)  {
  (void)_alloc;
    }



   typedef float _dual_ant_yaw_type;
  _dual_ant_yaw_type dual_ant_yaw;

   typedef float _dual_ant_yaw_error_type;
  _dual_ant_yaw_error_type dual_ant_yaw_error;

   typedef float _dual_ant_baseline_len_type;
  _dual_ant_baseline_len_type dual_ant_baseline_len;





  typedef boost::shared_ptr< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> const> ConstPtr;

}; // struct YesenseImuSlaveGnssData_

typedef ::yesense_imu::YesenseImuSlaveGnssData_<std::allocator<void> > YesenseImuSlaveGnssData;

typedef boost::shared_ptr< ::yesense_imu::YesenseImuSlaveGnssData > YesenseImuSlaveGnssDataPtr;
typedef boost::shared_ptr< ::yesense_imu::YesenseImuSlaveGnssData const> YesenseImuSlaveGnssDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator2> & rhs)
{
  return lhs.dual_ant_yaw == rhs.dual_ant_yaw &&
    lhs.dual_ant_yaw_error == rhs.dual_ant_yaw_error &&
    lhs.dual_ant_baseline_len == rhs.dual_ant_baseline_len;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yesense_imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8343f347c57f056bf546331417a9a305";
  }

  static const char* value(const ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8343f347c57f056bULL;
  static const uint64_t static_value2 = 0xf546331417a9a305ULL;
};

template<class ContainerAllocator>
struct DataType< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yesense_imu/YesenseImuSlaveGnssData";
  }

  static const char* value(const ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 dual_ant_yaw\n"
"float32 dual_ant_yaw_error\n"
"float32 dual_ant_baseline_len\n"
;
  }

  static const char* value(const ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dual_ant_yaw);
      stream.next(m.dual_ant_yaw_error);
      stream.next(m.dual_ant_baseline_len);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YesenseImuSlaveGnssData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yesense_imu::YesenseImuSlaveGnssData_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "dual_ant_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.dual_ant_yaw);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dual_ant_yaw_error: ";
    Printer<float>::stream(s, indent + "  ", v.dual_ant_yaw_error);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dual_ant_baseline_len: ";
    Printer<float>::stream(s, indent + "  ", v.dual_ant_baseline_len);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YESENSE_IMU_MESSAGE_YESENSEIMUSLAVEGNSSDATA_H
