// Generated by gencpp from file yesense_imu/YesenseImuMasterGnssData.msg
// DO NOT EDIT!


#ifndef YESENSE_IMU_MESSAGE_YESENSEIMUMASTERGNSSDATA_H
#define YESENSE_IMU_MESSAGE_YESENSEIMUMASTERGNSSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <yesense_imu/YesenseImuUtcTime.h>
#include <yesense_imu/YesenseImuLocation.h>
#include <yesense_imu/YesenseImuLocation.h>
#include <yesense_imu/YesenseImuVelocity.h>

namespace yesense_imu
{
template <class ContainerAllocator>
struct YesenseImuMasterGnssData_
{
  typedef YesenseImuMasterGnssData_<ContainerAllocator> Type;

  YesenseImuMasterGnssData_()
    : utc_time()
    , location()
    , location_error()
    , vel()
    , speed(0.0)
    , yaw(0.0)
    , status(0)
    , star_cnt(0)
    , p_dop(0.0)
    , site_id(0)  {
    }
  YesenseImuMasterGnssData_(const ContainerAllocator& _alloc)
    : utc_time(_alloc)
    , location(_alloc)
    , location_error(_alloc)
    , vel(_alloc)
    , speed(0.0)
    , yaw(0.0)
    , status(0)
    , star_cnt(0)
    , p_dop(0.0)
    , site_id(0)  {
  (void)_alloc;
    }



   typedef  ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator>  _utc_time_type;
  _utc_time_type utc_time;

   typedef  ::yesense_imu::YesenseImuLocation_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef  ::yesense_imu::YesenseImuLocation_<ContainerAllocator>  _location_error_type;
  _location_error_type location_error;

   typedef  ::yesense_imu::YesenseImuVelocity_<ContainerAllocator>  _vel_type;
  _vel_type vel;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _star_cnt_type;
  _star_cnt_type star_cnt;

   typedef float _p_dop_type;
  _p_dop_type p_dop;

   typedef uint8_t _site_id_type;
  _site_id_type site_id;





  typedef boost::shared_ptr< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> const> ConstPtr;

}; // struct YesenseImuMasterGnssData_

typedef ::yesense_imu::YesenseImuMasterGnssData_<std::allocator<void> > YesenseImuMasterGnssData;

typedef boost::shared_ptr< ::yesense_imu::YesenseImuMasterGnssData > YesenseImuMasterGnssDataPtr;
typedef boost::shared_ptr< ::yesense_imu::YesenseImuMasterGnssData const> YesenseImuMasterGnssDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator2> & rhs)
{
  return lhs.utc_time == rhs.utc_time &&
    lhs.location == rhs.location &&
    lhs.location_error == rhs.location_error &&
    lhs.vel == rhs.vel &&
    lhs.speed == rhs.speed &&
    lhs.yaw == rhs.yaw &&
    lhs.status == rhs.status &&
    lhs.star_cnt == rhs.star_cnt &&
    lhs.p_dop == rhs.p_dop &&
    lhs.site_id == rhs.site_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yesense_imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46d002ff35336e441b9b161969c45bbd";
  }

  static const char* value(const ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46d002ff35336e44ULL;
  static const uint64_t static_value2 = 0x1b9b161969c45bbdULL;
};

template<class ContainerAllocator>
struct DataType< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yesense_imu/YesenseImuMasterGnssData";
  }

  static const char* value(const ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yesense_imu/YesenseImuUtcTime   utc_time\n"
"yesense_imu/YesenseImuLocation  location\n"
"yesense_imu/YesenseImuLocation  location_error\n"
"yesense_imu/YesenseImuVelocity  vel\n"
"float32 speed\n"
"float32 yaw\n"
"uint8 status\n"
"uint8 star_cnt\n"
"float32 p_dop\n"
"uint8 site_id\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuUtcTime\n"
"uint16 year\n"
"uint8 month\n"
"uint8 date\n"
"uint8 hour\n"
"uint8 min\n"
"uint8 sec\n"
"uint32 ms\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuLocation\n"
"float64 longtidue\n"
"float64 latitude\n"
"float32 altidue\n"
"================================================================================\n"
"MSG: yesense_imu/YesenseImuVelocity\n"
"float32 v_e\n"
"float32 v_n\n"
"float32 v_u\n"
;
  }

  static const char* value(const ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.utc_time);
      stream.next(m.location);
      stream.next(m.location_error);
      stream.next(m.vel);
      stream.next(m.speed);
      stream.next(m.yaw);
      stream.next(m.status);
      stream.next(m.star_cnt);
      stream.next(m.p_dop);
      stream.next(m.site_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YesenseImuMasterGnssData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yesense_imu::YesenseImuMasterGnssData_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "utc_time: ";
    Printer< ::yesense_imu::YesenseImuUtcTime_<ContainerAllocator> >::stream(s, indent + "  ", v.utc_time);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "location: ";
    Printer< ::yesense_imu::YesenseImuLocation_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "location_error: ";
    Printer< ::yesense_imu::YesenseImuLocation_<ContainerAllocator> >::stream(s, indent + "  ", v.location_error);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vel: ";
    Printer< ::yesense_imu::YesenseImuVelocity_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "star_cnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.star_cnt);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "p_dop: ";
    Printer<float>::stream(s, indent + "  ", v.p_dop);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "site_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.site_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YESENSE_IMU_MESSAGE_YESENSEIMUMASTERGNSSDATA_H
