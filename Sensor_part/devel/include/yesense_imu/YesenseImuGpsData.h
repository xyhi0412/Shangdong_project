// Generated by gencpp from file yesense_imu/YesenseImuGpsData.msg
// DO NOT EDIT!


#ifndef YESENSE_IMU_MESSAGE_YESENSEIMUGPSDATA_H
#define YESENSE_IMU_MESSAGE_YESENSEIMUGPSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yesense_imu
{
template <class ContainerAllocator>
struct YesenseImuGpsData_
{
  typedef YesenseImuGpsData_<ContainerAllocator> Type;

  YesenseImuGpsData_()
    : raw_data()  {
    }
  YesenseImuGpsData_(const ContainerAllocator& _alloc)
    : raw_data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _raw_data_type;
  _raw_data_type raw_data;





  typedef boost::shared_ptr< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> const> ConstPtr;

}; // struct YesenseImuGpsData_

typedef ::yesense_imu::YesenseImuGpsData_<std::allocator<void> > YesenseImuGpsData;

typedef boost::shared_ptr< ::yesense_imu::YesenseImuGpsData > YesenseImuGpsDataPtr;
typedef boost::shared_ptr< ::yesense_imu::YesenseImuGpsData const> YesenseImuGpsDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yesense_imu::YesenseImuGpsData_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuGpsData_<ContainerAllocator2> & rhs)
{
  return lhs.raw_data == rhs.raw_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yesense_imu::YesenseImuGpsData_<ContainerAllocator1> & lhs, const ::yesense_imu::YesenseImuGpsData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yesense_imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a93dac2a6e802ac9f45a79f2b894d63d";
  }

  static const char* value(const ::yesense_imu::YesenseImuGpsData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa93dac2a6e802ac9ULL;
  static const uint64_t static_value2 = 0xf45a79f2b894d63dULL;
};

template<class ContainerAllocator>
struct DataType< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yesense_imu/YesenseImuGpsData";
  }

  static const char* value(const ::yesense_imu::YesenseImuGpsData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] raw_data\n"
;
  }

  static const char* value(const ::yesense_imu::YesenseImuGpsData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.raw_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YesenseImuGpsData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yesense_imu::YesenseImuGpsData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yesense_imu::YesenseImuGpsData_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "raw_data: ";
    if (v.raw_data.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.raw_data.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.raw_data[i]);
    }
    if (v.raw_data.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // YESENSE_IMU_MESSAGE_YESENSEIMUGPSDATA_H
